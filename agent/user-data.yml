#cloud-config

coreos:
  etcd2:
    proxy: on
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
  fleet:
    public-ip: $private_ipv4
    etcd_key_prefix: "/stakater/client"
  units:
    - name: etcd2.service
      command: start
      drop-ins:
        - name: 60-initial-cluster.conf
          content: |
            [Service]
            EnvironmentFile=/etc/sysconfig/initial-cluster
    - name: fleet.service
      command: start
    - name: increase-vm-max-map-count.service
      command: start
      content: |
        [Unit]
        Description=Increase vm max map count for elasticsearch to be able to run
        Before=docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/sysctl -w vm.max_map_count=262144
    - name: install-docker-compose.service
      command: start
      content: |
        [Unit]
        Description=Install Docker compose
        Requires=docker.service
        After=docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        EnvironmentFile=/etc/environment
        TimeoutStartSec=10min
        ExecStart=/opt/bin/install-docker-compose.sh
        [Install]
        WantedBy=multi-user.target

    # Not importing in .ssh as we are changing the file owner with hardcoded user in gocd-agent's container
    # as a workaround fo now
    # - name: import-ssh-keys.service
    #   command: start
    #   content: |
    #     [Unit]
    #     Description=Import SSH keys
    #
    #     [Service]
    #     RemainAfterExit=true
    #     ExecStartPre=/usr/bin/mkdir -p /home/core/.ssh
    #     ExecStart=/usr/bin/bash -c "cp /home/core/shared/gocd-data/ssh-key/* /home/core/.ssh/ && \
    #               chmod 600 /home/core/.ssh/id_rsa && \
    #               chmod 644 /home/core/.ssh/config"
    #     Restart=on-failure
    #     RestartSec=30
    #     StartLimitInterval=200
    #     StartLimitBurst=5
    #     [Install]
    #     WantedBy=multi-user.target
    - name: consul-agent.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Consul Agent
        After=docker.service
        Requires=docker.service
        After=etcd2.service
        Requires=etcd2.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/bash -c "/usr/bin/systemctl set-environment CONSUL_SERVER=$(etcdctl get /consul/server/ip)"
        ExecStartPre=/usr/bin/bash -c "/usr/bin/systemctl set-environment FALLBACK_HOST_DNS=$(cat /etc/resolv.conf | grep "nameserver" | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')"
        ExecStartPre=/usr/bin/docker pull consul:0.7.5
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStart=/usr/bin/docker run --rm --name %n \
                                  --net="host" \
                                  -v /consul/data:/consul/data \
                                  -e 'CONSUL_ALLOW_PRIVILEGED_PORTS=' \
                                  consul:0.7.5 agent -retry-join=${CONSUL_SERVER} -dns-port=53 -bind=$private_ipv4 -client=0.0.0.0 -recursor=${FALLBACK_HOST_DNS}
        ExecStop=/usr/bin/docker stop %n
        RestartSec=110
        Restart=always
    - name: registrator.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Registrator, Registers running docker containers with consul
        After=docker.service
        Requires=docker.service
        After=consul-agent.service
        Requires=consul-agent.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/docker pull gliderlabs/registrator:latest
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=-/usr/bin/sleep 10
        ExecStart=/usr/bin/docker run --rm --name %n \
                                  --net "host" \
                                  -v /var/run/docker.sock:/tmp/docker.sock \
                                  gliderlabs/registrator:latest consul://localhost:8500
        ExecStop=/usr/bin/docker stop %n
        RestartSec=120
        Restart=always
    - name: gocd-server.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=GoCD Server
        After=docker.service
        Requires=docker.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/docker pull stakater/gocd-server:v17.4.0
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=/usr/bin/bash -c "mkdir -p /home/core/docker-volumes/ssh-key"
        ExecStartPre=/usr/bin/bash -c "cp /home/core/shared/gocd-data/ssh-key/* /home/core/docker-volumes/ssh-key/"
        ExecStartPre=/usr/bin/chown -R 1001:1001 /home/core/docker-volumes/ssh-key/
        ExecStart=/usr/bin/sh -c "/usr/bin/docker run --rm --name %n \
                                  -p 8153:8153 \
                                  -p 8154:8154 \
                                  -e AGENT_KEY=123456789abcdef \
                                  -v /home/core/docker-volumes/ssh-key/:/home/go/.ssh:z \
                                  -v /home/core/shared/gocd-data/conf/cruise-config.xml:/godata/config/cruise-config.xml \
                                  -v /gocd-data/server/godata:/godata \
                                  -v /etc/localtime:/etc/localtime:ro \
                                  --label SERVICE_NAME=gocd-server \
                                  stakater/gocd-server:v17.4.0"
        ExecStop=/usr/bin/docker stop %n
        RestartSec=10
        Restart=always
    - name: gocd-agent.service
      command: start
      content: |
        [Unit]
        Description=gocd agent
        Requires=docker.service
        Requires=gocd-server.service
        After=docker.service gocd-server.service
        [Service]
        EnvironmentFile=/etc/environment
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/docker pull stakater/gocd-agent:v17.4.0
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=/usr/bin/systemctl set-environment GO_SERVER_IP="$(docker inspect --format='{{(index (index .NetworkSettings.IPAddress))}}' gocd-server.service)"
        ExecStartPre=/usr/bin/systemctl set-environment GO_SERVER_PORT="$(docker inspect --format='{{(index (index .NetworkSettings.Ports \"8154/tcp\") 0).HostPort}}' gocd-server.service)"
        ExecStartPre=/usr/bin/bash -c "mkdir -p /home/core/docker-volumes/ssh-key"
        ExecStartPre=/usr/bin/bash -c "cp /home/core/shared/gocd-data/ssh-key/* /home/core/docker-volumes/ssh-key/"
        ExecStartPre=/usr/bin/chown -R 1001:1001 /home/core/docker-volumes/ssh-key/
        ExecStart=/usr/bin/sh -c "/usr/bin/docker run --rm --name %n \
                -e AGENT_KEY=123456789abcdef \
                -e GO_SERVER_URL=https://${GO_SERVER_IP}:${GO_SERVER_PORT}/go \
                -v /home/core/docker-volumes/ssh-key/:/home/go/.ssh:z \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v /usr/bin/docker:/usr/bin/docker \
                -v /opt/bin/docker-compose:/opt/bin/docker-compose \
                -v /usr/lib/libdevmapper.so.1.02:/usr/lib/libdevmapper.so.1.02 \
                -v /usr/lib64/libsystemd.so.0:/usr/lib/libsystemd.so.0 \
                -v /usr/lib64/libgcrypt.so.20:/usr/lib/libgcrypt.so.20 \
                -v /usr/bin/fleetctl:/usr/bin/fleetctl \
                -v /etc/registry-certificates:/etc/registry-certificates \
                -v /etc/localtime:/etc/localtime:ro \
                -v /stakater:/stakater \
                --label SERVICE_NAME=gocd-agent \
                stakater/gocd-agent:v17.4.0"
        ExecStop=-/usr/bin/docker stop %n
        RestartSec=10
        Restart=always
    - name: elasticsearch.service
      command: start
      enable: false
      content: |
        [Unit]
        Description=Elasticsearch
        After=docker.service
        Requires=docker.service
        After=registrator.service
        Requires=registrator.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/docker pull stakater/elasticsearch:5.2
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStart=/usr/bin/docker run --rm --name %n \
                                  -p 9200:9200 -p 9300:9300 \
                                  --dns=$private_ipv4 \
                                  --dns-search=service.consul \
                                  -v /backup/data/es:/usr/share/elasticsearch/data \
                                  --label SERVICE_NAME=elasticsearch \
                                  --label SERVICE_TAGS=infra-app \
                                  stakater/elasticsearch:5.2
        ExecStop=/usr/bin/docker stop %n
        RestartSec=10
        Restart=always
    - name: kibana.service
      command: start
      enable: false
      content: |
        [Unit]
        Description=Kibana
        After=docker.service
        Requires=docker.service
        After=registrator.service
        Requires=registrator.service

        [Service]
        ExecStartPre=/usr/bin/docker pull stakater/kibana-with-consul-template:5.2-0.18.0
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStart=/usr/bin/sh -c "/usr/bin/docker run --rm --name %n \
                                  -p 5601:5601 \
                                  --dns=$private_ipv4 \
                                  --dns-search=service.consul \
                                  --label SERVICE_NAME=kibana \
                                  --label SERVICE_TAGS=infra-app \
                                  --memory=2048m \
                                  -v /home/core/shared/templates/kibana-templates:/templates \
                                  stakater/kibana-with-consul-template:5.2-0.18.0"
        ExecStop=/usr/bin/docker stop %n
        RestartSec=10
        Restart=always
    - name: logstash.service
      command: start
      enable: false
      content: |
        [Unit]
        Description=Logstash
        After=docker.service
        Requires=docker.service
        After=registrator.service
        Requires=registrator.service

        [Service]
        ExecStartPre=/usr/bin/docker pull stakater/logstash-with-consul-template:5.2-0.18.0
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStart=/usr/bin/sh -c "/usr/bin/docker run --rm --name %n \
                                  -p 5044:5044 \
                                  -p 9600:9600 \
                                  --dns=$private_ipv4 \
                                  --dns-search=service.consul \
                                  -v /home/core/shared/templates/logstash-templates:/templates \
                                  --label SERVICE_NAME=logstash \
                                  --label SERVICE_TAGS=infra-app \
                                  --memory=2048m \
                                  stakater/logstash-with-consul-template:5.2-0.18.0"
        TimeoutStartSec=360
        ExecStop=/usr/bin/docker stop %n
        RestartSec=30
        Restart=always
    - name: mysql.service
      command: start
      enable: false
      content: |
        [Unit]
        Description=MySQL
        After=docker.service
        Requires=docker.service
        After=registrator.service
        Requires=registrator.service

        [Service]
        ExecStartPre=/usr/bin/docker pull mysql:5.7
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStart=/usr/bin/sh -c "/usr/bin/docker run --rm --name %n \
                                  -p 3306:3306 \
                                  --dns=$private_ipv4 \
                                  --dns-search=service.consul \
                                  -v /backup/data/mysql:/var/lib/mysql \
                                  -e MYSQL_ROOT_PASSWORD="123456" \
                                  --label SERVICE_NAME=mysql \
                                  --label SERVICE_TAGS=backing-service \
                                  mysql:5.7"
        TimeoutStartSec=360
        ExecStop=/usr/bin/docker stop %n
        RestartSec=30
        Restart=always
write_files:
  - path: /etc/sysconfig/initial-cluster
    permissions: 0600
    owner: root
    content: |
      # Hardcoded server IP
      ETCD_INITIAL_CLUSTER="server=http://172.17.8.101:2380"

  - path: /opt/bin/install-docker-compose.sh
    permissions: 0700
    owner: root
    content: |
        #!/bin/bash
        mkdir -p /opt/bin
        curl -L `curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r '.assets[].browser_download_url | select(contains("Linux") and contains("x86_64"))'` > /opt/bin/docker-compose
        chmod +x /opt/bin/docker-compose